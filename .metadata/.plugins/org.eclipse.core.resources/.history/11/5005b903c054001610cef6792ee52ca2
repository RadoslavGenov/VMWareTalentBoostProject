
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A simple and light REST client The SSL server should be in the same secure
 * network environment, as the client won't check its certificate=
 */
public class SimpleRestClient {

	/**
	 * Implement a HTTP get
	 * 
	 * @param urlStr
	 *            URL to use for the post requst
	 * @param un
	 *            user name for basic authentication
	 * @param pass
	 *            password
	 * @param expectedCodes
	 *            Codes that are expected and which should not throw exception
	 * @throws IOException
	 */
	public static String httpGet(String urlStr, int... expectedCodes) throws IOException {
		URL url = new URL(urlStr);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setInstanceFollowRedirects(true);
		int code = conn.getResponseCode();
		if (code != 200) {
			if (code == 302) {
				System.out.println("Attempting to redirect to " + conn.getHeaderField("Location"));
			}
			boolean found = false;
			for (int c : expectedCodes) {
				if (c == code) {
					found = true;
					break;
				}
			}
			if (!found) {
				throw new IOException(conn.getResponseMessage() + " " + conn.getResponseCode());
			}
		}
		// Buffer the result into a string
		BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		StringBuilder sb = new StringBuilder();
		String line;
		while ((line = rd.readLine()) != null) {
			sb.append(line);
			sb.append("\n");
		}
		rd.close();

		conn.disconnect();
		return sb.toString();
	}

	/**
	 * Implement a HTTP post
	 * 
	 * @param urlStr
	 *            URL to use for the post requst
	 * @param un
	 *            user name for basic authentication
	 * @param pass
	 *            password
	 * @param param
	 *            Request parameters - ordered map
	 * @param body
	 *            Request body
	 * @param expectedCodes
	 *            Codes that are expected and which should not throw exception
	 * @return The response body
	 * @throws IOException
	 */
	public static String httpPost(String urlStr, LinkedHashMap<String, String> param, int... expectedCodes)
			throws IOException {
		URL url = new URL(urlStr);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod("POST");
		conn.setDoOutput(true);
		conn.setDoInput(true);
		conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
		conn.setInstanceFollowRedirects(true);
		OutputStream out = conn.getOutputStream();
		Writer writer = new OutputStreamWriter(out, "UTF-8");
		Iterator<Map.Entry<String, String>> it = param.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry<String, String> ent = it.next();
			writer.write(ent.getKey());
			writer.write("=");
			writer.write(URLEncoder.encode(ent.getValue(), "UTF-8"));
			writer.write("&");
		}
		writer.close();
		out.close();

		int code = conn.getResponseCode();

		if (code != 200) {
			if (code == 302) {
				System.out.println("Attempting to redirect to " + conn.getHeaderField("Location"));
			}
		}
		boolean found = false;
		for (int c : expectedCodes) {
			if (c == code) {
				found = true;
				break;
			}
		}
		if (!found) {
			throw new IOException(conn.getResponseMessage() + " " + conn.getResponseCode());
		}
		// Buffer the result into a string
		BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		StringBuilder sb = new StringBuilder();
		String line;
		while ((line = rd.readLine()) != null) {
			sb.append(line);
			sb.append("\n");
		}
		rd.close();
		conn.disconnect();
		return sb.toString();
	}

	public static void main(String[] args) {

	}
}
