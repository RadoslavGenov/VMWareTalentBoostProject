package com.vmware.threading.files.reworked;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class FileCountingTests {
	public static void sequentialCountFiles(File... files) throws InterruptedException, ExecutionException {
		List<Integer> results = new ArrayList<>();
		CompletionService<Integer> service = new ExecutorCompletionService<>(
				Executors.newFixedThreadPool(files.length));
		System.out.println("Starting sequential... ");
		long start = System.nanoTime();
		for (File file : files) {
			service.submit(new FileCount(file));
			Future<Integer> result = service.take();
			results.add(result.get());
		}
		System.out.println("Completion time in seconds: " + (System.nanoTime() - start) / 1e9);
	}//these are sequential

	public static void concurrentCountFiles(File... files){
		CompletionService<Integer> service = new ExecutorCompletionService<>(
				Executors.newFixedThreadPool(files.length));
		
		for(Callable<Integer> s : )//what about concurrent ????????!!!!!!
	}
	
	public static void main(String[] args) throws InterruptedException, ExecutionException {
		final File WINDOWS = new File("C:\\Windows");
		final File PROGRAM_FILES = new File("C:\\Program Files");
		sequentialCountFiles(WINDOWS, PROGRAM_FILES);
	}
}
